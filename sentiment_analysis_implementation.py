# -*- coding: utf-8 -*-
"""Sentiment Analysis Implementation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UJqbzQmQFKAaB7yjA5reDo9GtAEtgq3M

# Environment Setup
"""

!pip install pandas scikit-learn nltk

import nltk
nltk.download('stopwords')
nltk.download('punkt')

"""# Data Loading & Preprocessing"""

import pandas as pd
from sklearn.model_selection import train_test_split
from nltk.corpus import stopwords
import re

# Sample Data
data = {
    'review': [
        "This movie was absolutely brilliant! The acting was superb.",
        "I hated it. The plot was predictable and boring.",
        "A truly fantastic film with a powerful message.",
        "What a waste of time. I would not recommend this.",
        "The cinematography was beautiful, but the story was weak."
    ],
    'sentiment': ['positive', 'negative', 'positive', 'negative', 'negative']
}
df = pd.DataFrame(data)

# --- Preprocessing Function ---
stop_words = set(stopwords.words('english'))

def preprocess_text(text):
    text = text.lower()  # Lowercase
    text = re.sub(r'<.*?>', '', text)  # Remove HTML tags
    text = re.sub(r'[^a-z\s]', '', text)  # Remove punctuation and numbers
    tokens = text.split()
    # Remove stopwords
    clean_tokens = [word for word in tokens if word not in stop_words]
    return " ".join(clean_tokens)

df['clean_review'] = df['review'].apply(preprocess_text)
print(df)

"""# Feature Extraction & Model Training"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline

# Define features (X) and target (y)
X = df['clean_review']
y = df['sentiment']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a machine learning pipeline
# 1. TfidfVectorizer: Converts text to TF-IDF features.
# 2. LogisticRegression: The classification model.
pipeline = Pipeline([
    ('tfidf', TfidfVectorizer()),
    ('clf', LogisticRegression())
])

# Train the model
pipeline.fit(X_train, y_train)

"""# Evaluation & Prediction"""

from sklearn.metrics import classification_report

# Make predictions on the test set
y_pred = pipeline.predict(X_test)

# Evaluate the model
print("\n--- Classification Report ---")
print(classification_report(y_test, y_pred))

# --- Predict on a new review ---
new_review = "The performances were incredible and the direction was masterful."
prediction = pipeline.predict([new_review])
print(f"\nNew Review: '{new_review}'")
print(f"Predicted Sentiment: {prediction[0]}")

"""#Using VADAR in nltk

"""

!pip install nltk

import nltk

# Download the sentence tokenizer model
nltk.download('punkt')
# Download the VADER lexicon for sentiment analysis
nltk.download('vader_lexicon')

import nltk
nltk.download('punkt')

nltk.download('punkt_tab')

"""# The Code
This script will take a piece of text, split it into sentences, and then analyze the sentiment of each one.
"""

from nltk.sentiment.vader import SentimentIntensityAnalyzer
from nltk.tokenize import sent_tokenize

# Sample text with mixed sentiment
text = "The cinematography was beautiful, but the story was weak. The acting was decent, though the ending felt rushed and disappointing. Overall, it's an okay film, but not something I would watch again."

# 1. Initialize VADER
analyzer = SentimentIntensityAnalyzer()

# 2. Split the text into sentences
sentences = sent_tokenize(text, language='english')

print(f"--- Analyzing Text: \"{text}\" ---\n")

# 3. Analyze each sentence
for i, sentence in enumerate(sentences):
    print(f"Sentence {i+1}: {sentence}")

    # Get the polarity scores
    scores = analyzer.polarity_scores(sentence)

    # Print the detailed scores
    print(f"Scores: {scores}")

    # Determine the overall tone of the sentence
    compound_score = scores['compound']
    if compound_score >= 0.05:
        tone = "Positive"
    elif compound_score <= -0.05:
        tone = "Negative"
    else:
        tone = "Neutral"

    print(f"Tone: {tone}\n" + "-"*30)